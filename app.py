# app.py
import streamlit as st
import zipfile
import tempfile
import os
import subprocess
import geopandas as gpd
import pandas as pd
import joblib

# -------------------------------------------
# Einstellungen & Metadaten
# -------------------------------------------
st.set_page_config(
    page_title="Die Digitale Jury",
    layout="centered"
)

st.title("Die Digitale Jury - objektive Bewertung st√§dtebaulicher Entw√ºrfe")
st.markdown("""
Hier werden anhand von 13 Bewertungskriterien st√§dtebauliche Entw√ºrfe im Rahmen der Diplomarbeit **‚ÄûDie Digitale Jury‚Äú** bewertet.  
Basierend auf eingelesenen Shapefiles werden st√§dtebauliche Kriterien wie Mobilit√§t, Freiraumanteile, √∂kologische Aspekte (PV, Dachbegr√ºnung, Entsiegelung) sowie die Einbettung in den st√§dtebaulichen Kontext automatisiert bewertet.

Die Bewertung wird auf Grundlage der vorhandenen Daten durchgef√ºhrt. Fehlende Layer f√ºhren zu `0` in der Ergebnis√ºbersicht.

1Ô∏è‚É£ Lade deine Entwurfsdaten (als ZIP) hoch.  
2Ô∏è‚É£ Die Geodaten werden automatisch verarbeitet.  
3Ô∏è‚É£ Du erh√§ltst die objektive Bewertung (1-5 Sterne) basierend auf einem trainierten Random Forest Modell.
""")

# -------------------------------------------
# trainiertes Random-Forest-Modell laden
# -------------------------------------------
MODEL_PATH = "best_rf_model.pkl"

try:
    rf_model = joblib.load(MODEL_PATH)
    st.success("‚úÖ Bewertungsmodell erfolgreich geladen.")
except:
    st.error("‚ùå Bewertungsmodell (.pkl) konnte nicht geladen werden.")
    st.stop()

# -------------------------------------------
# ZIP Upload
# -------------------------------------------
uploaded_file = st.file_uploader("Entwurf als ZIP hochladen", type="zip")

if uploaded_file:
    with tempfile.TemporaryDirectory() as tmpdir:
        zip_path = os.path.join(tmpdir, "upload.zip")
        with open(zip_path, "wb") as f:
            f.write(uploaded_file.getbuffer())

        with zipfile.ZipFile(zip_path, "r") as zip_ref:
            zip_ref.extractall(tmpdir)

        st.info("Dateien entpackt. Berechne Kriterien...")

        # SHP-Verkn√ºpfungs-Skript
        subprocess.run(["python", "shpVerknuepfung.py", tmpdir], check=True)

        # Lies die Ergebnisse
        kriterien_path = os.path.join(tmpdir, "Kriterien_Ergebnisse.xlsx")
        if not os.path.exists(kriterien_path):
            st.error("Die Kriterien-Datei wurde nicht erstellt.")
            st.stop()

        df = pd.read_excel(kriterien_path)

        # Entferne K001 & K014, falls vorhanden
        for k in ["K001", "K014"]:
            if k in df.columns:
                df.drop(columns=[k], inplace=True)

        # Fehlende Werte Zero-Fill
        df = df.fillna(0)

        # Vorhersage durchf√ºhren
        kriterien_spalten = [col for col in df.columns if col.startswith("K")]
        prediction = rf_model.predict(df[kriterien_spalten])[0]

        # Ergebnis anzeigen
        st.success(f"‚≠êÔ∏è Ergebnis: **{int(prediction)} Sterne**")

        st.markdown("### üìä Bewertete Kriterien")
        st.dataframe(df)

        # Download anbieten
        df["Anzahl Sterne"] = int(prediction)
        output_path = os.path.join(tmpdir, "Bewertung_Digitale_Jury.xlsx")
        df.to_excel(output_path, index=False)
        with open(output_path, "rb") as f:
            st.download_button(
                label="Ergebnis als Excel herunterladen",
                data=f,
                file_name="Bewertung_Digitale_Jury.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
